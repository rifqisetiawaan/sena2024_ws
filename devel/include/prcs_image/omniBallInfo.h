// Generated by gencpp from file prcs_image/omniBallInfo.msg
// DO NOT EDIT!


#ifndef PRCS_IMAGE_MESSAGE_OMNIBALLINFO_H
#define PRCS_IMAGE_MESSAGE_OMNIBALLINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace prcs_image
{
template <class ContainerAllocator>
struct omniBallInfo_
{
  typedef omniBallInfo_<ContainerAllocator> Type;

  omniBallInfo_()
    : Header()
    , radius(0.0)
    , angle(0.0)
    , pos_known(false)
    , x_pos(0)
    , y_pos(0)
    , distance(0.0)  {
    }
  omniBallInfo_(const ContainerAllocator& _alloc)
    : Header(_alloc)
    , radius(0.0)
    , angle(0.0)
    , pos_known(false)
    , x_pos(0)
    , y_pos(0)
    , distance(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _Header_type;
  _Header_type Header;

   typedef float _radius_type;
  _radius_type radius;

   typedef float _angle_type;
  _angle_type angle;

   typedef uint8_t _pos_known_type;
  _pos_known_type pos_known;

   typedef int32_t _x_pos_type;
  _x_pos_type x_pos;

   typedef int32_t _y_pos_type;
  _y_pos_type y_pos;

   typedef float _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::prcs_image::omniBallInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::prcs_image::omniBallInfo_<ContainerAllocator> const> ConstPtr;

}; // struct omniBallInfo_

typedef ::prcs_image::omniBallInfo_<std::allocator<void> > omniBallInfo;

typedef boost::shared_ptr< ::prcs_image::omniBallInfo > omniBallInfoPtr;
typedef boost::shared_ptr< ::prcs_image::omniBallInfo const> omniBallInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::prcs_image::omniBallInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::prcs_image::omniBallInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::prcs_image::omniBallInfo_<ContainerAllocator1> & lhs, const ::prcs_image::omniBallInfo_<ContainerAllocator2> & rhs)
{
  return lhs.Header == rhs.Header &&
    lhs.radius == rhs.radius &&
    lhs.angle == rhs.angle &&
    lhs.pos_known == rhs.pos_known &&
    lhs.x_pos == rhs.x_pos &&
    lhs.y_pos == rhs.y_pos &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::prcs_image::omniBallInfo_<ContainerAllocator1> & lhs, const ::prcs_image::omniBallInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace prcs_image

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::prcs_image::omniBallInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prcs_image::omniBallInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prcs_image::omniBallInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prcs_image::omniBallInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prcs_image::omniBallInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prcs_image::omniBallInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::prcs_image::omniBallInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e12555c6777f103b129b21a823dbf452";
  }

  static const char* value(const ::prcs_image::omniBallInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe12555c6777f103bULL;
  static const uint64_t static_value2 = 0x129b21a823dbf452ULL;
};

template<class ContainerAllocator>
struct DataType< ::prcs_image::omniBallInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prcs_image/omniBallInfo";
  }

  static const char* value(const ::prcs_image::omniBallInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::prcs_image::omniBallInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header Header\n"
"float32 radius\n"
"float32 angle\n"
"bool pos_known\n"
"\n"
"int32 x_pos\n"
"int32 y_pos\n"
"float32 distance\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::prcs_image::omniBallInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::prcs_image::omniBallInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Header);
      stream.next(m.radius);
      stream.next(m.angle);
      stream.next(m.pos_known);
      stream.next(m.x_pos);
      stream.next(m.y_pos);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct omniBallInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::prcs_image::omniBallInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::prcs_image::omniBallInfo_<ContainerAllocator>& v)
  {
    s << indent << "Header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.Header);
    s << indent << "radius: ";
    Printer<float>::stream(s, indent + "  ", v.radius);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "pos_known: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pos_known);
    s << indent << "x_pos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x_pos);
    s << indent << "y_pos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y_pos);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRCS_IMAGE_MESSAGE_OMNIBALLINFO_H
